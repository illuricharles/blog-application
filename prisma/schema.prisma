// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 

 
model User {
  id            String    @id @default(cuid())
  name          String    @default("")
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  gallery       Gallery[]    
  blog          BlogPost[]
  comments      Comment[]
 
  @@map("users")
}
 

model EmailVerification {
  id        String        @id       @default(cuid())
  email     String        @unique
  token     String        @unique
  expire    DateTime      

  @@map("email_verification")
}

model Gallery {
  id          String    @id         @default(cuid())
  userId      String                @map("user_id")
  imageUrl    String    @unique     @map("image_url")
  imageKey    String    @unique     @map("image_key")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("gallery")
}

model BlogPost {
  id          String      @id            @default(cuid())
  authorId    String                     @map("author_id")
  title       String
  description String
  content     String
  coverImage  String                      @map("cover_image")
  createdAt   DateTime   @default(now())  @map("created_at")
  user        User        @relation(fields: [authorId], references: [id])
  comments    Comment[]   
  @@map("blog_posts")
}

model Comment {
  id          String      @id         @default(cuid())
  postId      String                  @map("post_id")
  userId      String                  @map("user_id")
  comment     String
  createdAt   DateTime                @default(now())   @map("created_at")
  updatedAt   DateTime    @updatedAt                    @map("updated_at")

  //relations
  post      BlogPost      @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@map("comments")
}